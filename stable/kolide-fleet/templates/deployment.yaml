---
apiVersion: "extensions/v1beta1"
kind: "Deployment"
metadata:
  labels:
    app: {{ template "fleet.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
  name: {{ template "fleet.fullname" . }}
spec:
  replicas: {{ default 2 .Values.deployment.replicas }}
  selector:
    matchLabels:
      app: {{ template "fleet.fullname" . }}
      release: "{{ .Release.Name }}"
  strategy:
    type: "Recreate"
  template:
    metadata:
      annotations:
        ## Only scrape pods that have a value of `true`
        prometheus.io/scrape: {{ default "true" .Values.monitoring.pod.scrape | quote }}
        ## If the metrics path is not `/metrics` override this.
        prometheus.io/port: {{ default "9102" .Values.monitoring.pod.port | quote }}
        ## scrape the pod on the indicated port instead of the default of `9102`.
        prometheus.io/path: {{ default "metrics" .Values.monitoring.pod.path | quote }}
        ## Scrape the pod over protocol
        prometheus.io/scheme: {{ default "http" .Values.monitoring.pod.scheme | quote }}
        ##
        ## Oftentimes, applicatins need to be restarted once once their configuration has been updated. However,
        ## Kubernetes makes the assumption that watching the file for configuration change is the applications
        ## responsibiliy, and doesn't restart when files change. So, the lines below modify a propery that does trigger
        ## a rotation of the applications so they are restarted when their dependencies change.
        ##
        ## See https://github.com/kubernetes/helm/blob/master/docs/charts_tips_and_tricks.md
        ##   #automatically-roll-deployments-when-configmaps-or-secrets-change
        ##
        # checksum/config: {{ include (print $.Chart.Name "/templates/secret.yaml") . | sha256sum }}
        # checksum/config: {{ include (print $.Chart.Name "/templates/configmap.yaml") . | sha256sum }}
      labels:
        app: {{ template "fleet.fullname" . }}
        release: "{{ .Release.Name }}"
    spec:
      volumes:
          # The name comes from the configmap. It's also shown earlier
        - name: "fleet-configuration"
          configMap:
            name: {{ template "fleet.fullname" . }}
        - name: "fleet-tls"
          secret:
            secretName: {{ template "fleet.fullname" . }}-tls
      containers:
        - name: fleet
          env: 
            - name: "KOLIDE_AUTH_JWT_KEY"
              valueFrom:
                secretKeyRef:
                  name: {{ template "fleet.fullname" . }}
                  key: "fleet.auth.jwt_key"
            - name: "KOLIDE_MYSQL_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: {{ template "fleet.fullname" . }}
                  key: "fleet.mysql.username"
            - name: "KOLIDE_MYSQL_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ template "fleet.fullname" . }}
                  key: "fleet.mysql.password"
            - name: "KOLIDE_REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ template "fleet.fullname" . }}
                  key: "fleet.redis.password"
          image: {{ .Values.pod.fleet.image | quote }}
          args:
            - "fleet"
            - "serve"
            - "--config"
            - "/etc/fleet/config.yml"
          resources:
{{ toYaml .Values.resources | indent 12 }}
          securityContext:
            privileged: {{ default false .Values.pod.fleet.securityContext.privileged }}
            # capabilities:
              # add:
                # - "SETPCAP"
                # - "SYS_MODULE"
                # - "SYS_RAWIO"
                # - "SYS_PACCT"
                # - "SYS_ADMIN"
                # - "SYS_NICE"
                # - "SYS_RESOURCE"
                # - "SYS_TIME"
                # - "SYS_TTY_CONFIG"
                # - "MKNOD"
                # - "AUDIT_WRITE"
                # - "AUDIT_CONTROL"
                # - "MAC_OVERRIDE"
                # - "MAC_ADMIN"
                # - "NET_ADMIN"
                # - "SYSLOG"
                # - "CHOWN"
                # - "NET_RAW"
                # - "DAC_OVERRIDE"
                # - "FOWNER"
                # - "DAC_READ_SEARCH"
                # - "FSETID"
                # - "KILL"
                # - "SETGID"
                # - "SETUID"
                # - "LINUX_IMMUTABLE"
                # - "NET_BIND_SERVICE"
                # - "NET_BROADCAST"
                # - "IPC_LOCK"
                # - "IPC_OWNER"
                # - "SYS_CHROOT"
                # - "SYS_PTRACE"
                # - "SYS_BOOT"
                # - "LEASE"
                # - "SETFCAP"
                # - "WAKE_ALARM"
                # - "BLOCK_SUSPEND"
          ports:
            ## The container port to expose, and how to expose it. Possible values are any valid port number. You
            ## probably want to expose your application port, though.
            ##
            ## See http://kubernetes.io/docs/api-reference/v1/definitions/#_v1_containerport
            - containerPort: 8080
              ## What protocol the port uses. Possible values are:
              # - "TCP"
              # - "UDP"
              protocol: "TCP"
              ## What designation to give the port. Useful later, so we can reference the port by name in the health
              ## check.
              name: "http"
          volumeMounts:
            - name: "fleet-configuration"
              readOnly: true
              mountPath: "/etc/fleet"
            - name: "fleet-tls"
              readOnly: true
              mountPath: "/etc/pki/fleet"
          livenessProbe:
            httpGet:
              path: /healthz
              port: "http"
              scheme: "HTTPS"
              periodSeconds: 10
              initialDelaySeconds: 5
              timeoutSeconds: 1
              failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: "http"
              scheme: "HTTPS"
              periodSeconds: 10
              initialDelaySeconds: 5
              timeoutSeconds: 1
              failureThreshold: 3
      restartPolicy: "Always"
      securityContext:
        ## Volumes which support ownership management are modified to be owned and writable by the GID specified in
        ## fsGroup. See the Ownership Management design document for more details.
        ## See: https://github.com/kubernetes/community/blob/master/contributors/design-proposals/
        ##      volume-ownership-management.md
        # fsGroup: 1000
        ## A list of groups applied to the first process run in each container, in addition to the containerâ€™s primary
        ## GID. If unspecified, no groups will be added to any container.
        # supplementalGroups: [1000]
