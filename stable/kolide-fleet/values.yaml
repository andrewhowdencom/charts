---
## Change the name of the resource
## Default: use the chart name
# nameOverride:

mysql:
  mysqlUser: "kolide"
  mysqlDatabase: "kolide"
  ## (Required)
  mysqlPassword: ""

redis:
  ## (Required)
  redisPassword: ""

tls:
  # Whether to generate TLS certificates during installation. Enable this if you're testing to create a self signed
  # certificate during installation.
  generate: false

## Fleet application specific settings
fleet:
  mysql: {}
    # address: ""
    # database: ""
    # tls_cert: ""
    # tls_key: ""
    # tls_ca: ""
    # tls_server_name: ""
    # tls_config: ""
  server: {}
    # tls: ""
    # tlsprofile: "modern"
  auth:
    ## (Required)
    jwt_key: ""
    # bcrypt_cost: ""
    # salt_key_size: ""
  app: {}
    # token_key_size: ""
    # invite_token_validity_period: ""
  session: {}
    # key_size: ""
    # duration: ""
  osquery: {}
    # node_key_size: ""
    # label_update_interval: ""
  logging:
    ## Whether to enable debug logging
    debug: false
    ## Whether logging should be expressed in JSON
    json: true
    ## Whether to disable the banner as part of the logs
    disable_banner: true

pod:
  annotations: {}
    ## Attach arbitrary key → value pairs for the pod definition. For example,
    # prometheus.io/path: /metrics
    # prometheus.io/port: "8080"
    # prometheus.io/scheme: https
    # prometheus.io/scrape: "true"
  fleet:
    ## The image to use with the resource
    ## Ref: https://kolide/fleet
    image: kolide/fleet
    ## Host networking requested for this pod. Use the host’s network namespace. If this option is set, the ports that
    ## will be used must be specified.
    ## Ref: https://kubernetes.io/docs/api-reference/v1/definitions/#_v1_podspec
    hostNetwork: false
    ## Use the host’s pid namespace
    ## Ref: https://kubernetes.io/docs/api-reference/v1/definitions/#_v1_podspec
    hostPID: false
    securityContext:
      ## Whether the container should be run in "privileged" mode (essentially, root on the host)
      ## Ref: http://kubernetes.io/docs/api-reference/v1/definitions/#_v1_securitycontext
      ## Default: false
      privileged:

service:
  ## What scope the service should be exposed in. One of:
  ## - LoadBalancer (to the world)
  ## - ClusterIP (to the cluster)
  ## - NodePort (to the world, in a custom way)
  type: "LoadBalancer"
  ## If there is a port associated with a given service, expose it here.
  # port:
  ## If there is a particular IP that should be used for the service, specify it here.
  ## Note: It's quite unlikely that an IP should be specific. Normally, the best thing to do is leave it to Kubernetes
  ##       to allocate a free IP from the pool.
  ## Default: Automatically assign a random IP
  # privateIp:
  ## Only relevant if the `type` above is "LoadBalancer"
  loadBalancer:
    ## If there is already a reserved public IP that this load balancer should use, indicate it here.
    ## Default: Automatically assign a random, ephemeral IP
    # publicIp:
    ## If there should be firewall rules restricting the load balancer to a limited set of IPs, specify those IPs below
    ## in CIDR format. If all IPs shoud be allowed access, set the CIDR as "0.0.0.0/0"
    allowedIps:
      - "0.0.0.0/0"
    ## If there is a Hostname associated with this site, add it here and it will be rendered in the documentation.
    # hostName:
  annotations: {}
    ## Attack arbitrary key → value pairs for the pod definition. For example
    # prometheus.io/probe: true
    # prometheus.io/path: /healthz
    # prometheus.io/scheme: https
    # prometheus.io/port: 443

## How many versions of the deployment to run on kubernetes
## Default: 2
deployment:
  replicas: 1

resources:
  requests:
    cpu: "100m"
    memory: "256Mi"
  limits:
    # cpu: "100m"
    # memory: "512Mi"

persistence:
  size: "10Gi"
  # existingClaim:
  # storageClass:
  ## If the storage class has been defined specifically for this chart, modify the PVC to select that storage class
  ## All of the requirements, from both matchLabels and matchExpressions are ANDed together – they must all be satisfied
  ## in order to match.
  # selector:
    ## Key / Value pair to match
    # matchLabels:
      # foo: "bar"
    # matchExpressions:
      #- key: environment
      #  operator: In
      #  values:
      #    - dev

## Configuration to enable the easy provisioning of certificates with kube-cert-manager and a Boulder compatible CA
certificate:
  domain: "www.example.com"
  email: "user@example.com"
  ## Consult the Kube cert manager docs for information on how to build this
  provider: "GoogleCloud"


## Monitoring adds the prometheus.io annotations to pods and services, so that the Prometheus Kubernetes SD mechanism
## as configured in the examples will automatically discover both the pods and the services to query.
##
## This defaults on, as the annotations should do no harm where Prometheus is not available but will automatically
## expose the application where Prometheus is.
##
## See https://github.com/prometheus/docs/blob/master/content/docs/operating/configuration.md
## See https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml
monitoring:
  ## Whether to scrape this service with the montoring toolkit. Mostly useful for blackbox probing of a given service
  ## to ensure it's "up"
  service:
    ## monitoring should be configured to only scrape services that have a value of "true"
    scrape: "true"
    ## Path on which metrics are exposed
    path: "/metrics"
    ## Port on which HTTP server is served
    port: "9102"
  ## Whether to scape the pods associated with this application. Useful for collecting metrics.
  pod:
    ## monitoring shoudl be configured to only scrape pods that have a value of `true`
    scrape: "true"
    ## Path on which metrics are exposed
    path: "/metrics"
    ## Port on which HTTP server is served
    port: "9102"
